import prisma from '../lib/prisma';
import openai from '../lib/openai';

export class CVService {
  static async createCV(cvData: any, jobData: any) {
    console.log('üöÄ D√©but de createCV avec:', { 
      cvDataLength: JSON.stringify(cvData).length,
      jobDataLength: JSON.stringify(jobData).length 
    });

    const cvJson = JSON.stringify(cvData);
    const jobJson = JSON.stringify(jobData);

    console.log('üíæ Cr√©ation du CV dans la base de donn√©es...');
    const cv = await prisma.cV.create({
      data: {
        originalCV: cvJson,
        jobData: jobJson,
        status: 'processing'
      }
    });
    console.log('‚úÖ CV cr√©√© avec ID:', cv.id);

    // Lancer la g√©n√©ration en arri√®re-plan
    console.log('üîÑ Lancement de la g√©n√©ration en arri√®re-plan...');
    this.generateCV(cv.id, cvData, jobData).catch(error => {
      console.error('‚ùå Erreur de g√©n√©ration en arri√®re-plan:', error);
    });

    return cv.id;
  }

  static async getCV(id: string) {
    console.log('üîç Recherche du CV avec ID:', id);
    const cv = await prisma.cV.findUnique({
      where: { id }
    });

    if (!cv) {
      console.log('‚ùå CV non trouv√© pour ID:', id);
      throw new Error('CV non trouv√©');
    }

    console.log('üìä √âtat du CV:', {
      id: cv.id,
      status: cv.status,
      hasError: !!cv.error,
      hasOptimizedCV: !!cv.optimizedCV
    });

    return {
      id: cv.id,
      status: cv.status,
      error: cv.error,
      data: cv.optimizedCV ? JSON.parse(cv.optimizedCV) : null
    };
  }

  static async generateCV(id: string, cvData: any, jobData: any) {
    console.log('\nüéØ D√©but de generateCV pour ID:', id);
    
    // V√©rifier la configuration OpenAI
    console.log('üîë V√©rification de la configuration OpenAI:', {
      hasApiKey: !!process.env.OPENAI_API_KEY,
      apiKeyLength: process.env.OPENAI_API_KEY?.length || 0
    });

    console.log('üìù Donn√©es re√ßues:', {
      cvDataKeys: Object.keys(cvData),
      jobDataKeys: Object.keys(jobData)
    });

    try {
      const prompt = `Tu es un expert en ressources humaines sp√©cialis√© dans la cr√©ation de CV selon les normes canadiennes.
Tu as une excellente capacit√© √† identifier les liens entre les activit√©s personnelles et les comp√©tences professionnelles.

Voici le CV actuel (texte brut extrait) :
${JSON.stringify(cvData, null, 2)}

Voici la description du poste √† pourvoir :
Titre: ${jobData.jobTitle}
Description: ${jobData.jobDescription}

Ta t√¢che est d'analyser ces informations et de g√©n√©rer un nouveau CV au format JSON qui respecte les normes canadiennes et qui est PARFAITEMENT adapt√© √† ce poste.

Instructions sp√©cifiques :
1. G√©n√®re le CV dans la langue de la description du poste

2. . Adaptation au poste  
   - Reformule et ajuste chaque section pour mettre l‚Äôaccent sur les comp√©tences, mots-cl√©s et exigences directement li√©s au poste.  
   - Ton de r√©daction professionnel et clair.  
   - Mets en avant 3 r√©alisations pertinentes pour chaque experience professionnlle.  
   - Utilise un **format chronologique inverse** (exp√©riences les plus r√©centes en premier).

3. estimela longueur du contenu et optimise la mise en page :
   - Si le contenu est court, ajuste les marges et espacements
   - Si le contenu est long, ajuste les marges et espacements
   - Ajoute une propri√©t√© "layout" dans le JSON avec les param√®tres optimaux pour que le cv ne depasse pas 2 pages

**Section VolunteerWork (b√©n√©volat)**  
   - **M√™me si ces informations n‚Äôexistent pas dans le CV original**, cr√©e 1 √† 2 exp√©riences de b√©n√©volat cr√©dibles, localis√©es dans la r√©gion du candidat, datant des 2-3 derni√®res ann√©es.  
   - Ces exp√©riences doivent mettre en valeur des comp√©tences pertinentes pour le poste et d√©montrer l‚Äôengagement communautaire du candidat.


5. **Section Hobbies (loisirs)**  
   - **Cr√©e** 1 √† 2 centres d‚Äôint√©r√™ts ou loisirs qui montrent des qualit√©s ou comp√©tences indirectement utiles pour le poste (leadership, cr√©ativit√©, esprit d‚Äô√©quipe, etc.).  
   - Donne des descriptions **sp√©cifiques** et **d√©taill√©es** (1-2 phrases) expliquant pourquoi ces hobbies sont utiles ou valorisants dans le contexte professionnel.

6. - liste toutes les experiences professionnlles du cv initial
   -**Ne pas changer le domaine d‚Äôactivit√©** : Conserve les m√™mes titres de postes, p√©riodes, entreprises, et contexte g√©n√©ral (m√™me secteur si mentionn√©) figurant dans le CV initial.  
   - **Adapter les t√¢ches et r√©alisations** : Reformule les responsabilit√©s, missions et r√©alisations pour mieux correspondre aux exigences du poste √† pourvoir, **mais sans cr√©er de nouvelles exp√©riences** qui n‚Äôexistent pas.  
   - **Pas de fictions dans l‚Äôexp√©rience** : Ne cr√©e pas de nouveaux postes, entreprises ou dur√©es d‚Äôemploi qui ne figurent pas dans le CV d‚Äôorigine.  
   - Si n√©cessaire, tu peux reformuler ou d√©tailler les t√¢ches pour les aligner avec l‚Äôoffre d‚Äôemploi. 

Points importants pour un CV canadien :
1. Pas de photo
2. Pas d'informations personnelles comme l'√¢ge, le statut matrimonial ou la nationalit√©
3. Format chronologique inverse (exp√©riences les plus r√©centes en premier)
4. Inclusion des soft skills pertinents
5. Adaptation sp√©cifique aux mots-cl√©s du poste
6. Section des langues avec niveau de ma√Ætrise

Retourne UNIQUEMENT un objet JSON valide avec la structure suivante, sans aucun texte avant ou apr√®s :
{
  "language": " "fr" or "en" depending on  ${jobData.jobDescription} language",
  "layout": {
    "margins": {
      "top": "nombre en pixels",
      "bottom": "nombre en pixels",
      "left": "nombre en pixels",
      "right": "nombre en pixels"
    },
    "spacing": {
      "sectionSpacing": "nombre en pixels",
      "itemSpacing": "nombre en pixels",
      "lineHeight": "nombre (1.2-1.5)",
      "fontSize": {
        "name": "nombre en pixels (18-20)",
        "title": "nombre en pixels (16-18)",
        "sectionTitle": "nombre en pixels (14-16)",
        "normal": "nombre en pixels (10-12)"
      }
    }
  },
  "personalInfo": {
    "name": "nom complet",
    "title": "titre du poste",
    "email": "email",
    "phone": "t√©l√©phone",
    "location": "ville, province",
    "linkedin": "lien linkedin (optionnel)"
  },
  "professionalSummary": "r√©sum√© professionnel cibl√© pour le poste",
  "skills": {
    "technical": ["comp√©tences techniques"],
    "soft": ["comp√©tences g√©n√©rales"]
  },
  "languages": [
    {
      "language": "nom de la langue",
      "level": "niveau de ma√Ætrise"
    }
  ],
  "experience": [
    {
      "title": "titre du poste",
      "company": "entreprise",
      "location": "ville, province",
      "period": "p√©riode",
      "achievements": ["r√©alisations quantifiables"]
    }
  ],
  "education": [
    {
      "degree": "dipl√¥me",
      "field": "domaine d'√©tudes",
      "institution": "√©tablissement",
      "location": "ville, province",
      "year": "ann√©e"
    }
  ],
  "certifications": [
    {
      "name": "nom de la certification",
      "issuer": "organisme",
      "year": "ann√©e"
    }
  ],
  "volunteerWork": [
    {
      "organization": "nom de l'organisation",
      "role": "r√¥le",
      "period": "p√©riode",
      "description": "description des r√©alisations et comp√©tences d√©montr√©es"
    }
  ],
  "hobbies": [
    {
      "category": "cat√©gorie du loisir",
      "description": "description d√©taill√©e montrant le lien avec les comp√©tences professionnelles"
    }
  ]
}`;

      console.log('ü§ñ Appel de l\'API OpenAI...');
      console.log('üì§ Envoi du prompt de longueur:', prompt.length);

      const completion = await openai.chat.completions.create({
        messages: [
          {
            role: "system",
            content: "Tu es un expert en ressources humaines sp√©cialis√© dans l'optimisation de CV. Tu dois ABSOLUMENT conserver TOUTES les exp√©riences professionnelles du CV original, sans exception. Tu peux reformuler leur contenu mais tu ne dois ni en ajouter ni en supprimer. tu dois ABSOLUMENT identifier la langue de ${jobData.jobDescription} c'est la langue avec laquelle tu vas generer le nouveau cv. Le contenu du nouveau CV doit etre adequat au poste a pourvoir."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        model: "gpt-4-turbo-preview",
        temperature: 0.3,
        response_format: { type: "json_object" }
      });

      console.log('‚úÖ R√©ponse re√ßue de l\'API OpenAI:', {
        hasContent: !!completion.choices[0].message.content,
        contentLength: completion.choices[0].message.content?.length || 0
      });

      const optimizedCV = completion.choices[0].message.content;
      
      if (!optimizedCV) {
        throw new Error('Pas de r√©ponse de l\'IA');
      }

      // V√©rifier que la r√©ponse est un JSON valide
      try {
        JSON.parse(optimizedCV);
        console.log('‚úÖ La r√©ponse est un JSON valide');
      } catch (e) {
        console.error('‚ùå La r√©ponse n\'est pas un JSON valide:', e);
        throw new Error('La r√©ponse de l\'IA n\'est pas un JSON valide');
      }

      console.log('üíæ Mise √† jour du CV dans la base de donn√©es...');
      // Mettre √† jour le CV dans la base de donn√©es
      await prisma.cV.update({
        where: { id },
        data: {
          optimizedCV,
          status: 'completed'
        }
      });
      console.log('‚úÖ CV mis √† jour avec succ√®s. Status: completed');
    } catch (error: any) {
      console.error('‚ùå Erreur d√©taill√©e:', {
        message: error.message,
        stack: error.stack,
        type: error.constructor.name,
        openaiError: error.response?.data || error.response || null
      });

      // Mettre √† jour le statut d'erreur
      console.log('üîÑ Mise √† jour du statut d\'erreur dans la base de donn√©es...');
      await prisma.cV.update({
        where: { id },
        data: {
          status: 'error',
          error: error?.message || 'Erreur inconnue lors de la g√©n√©ration'
        }
      });
      console.log('‚úÖ Statut d\'erreur mis √† jour');
    }
  }
}
